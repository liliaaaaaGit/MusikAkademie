import { useState } from 'react';
import { supabase, Teacher } from '@/lib/supabase';
import { useAuth } from '@/hooks/useAuth';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { INSTRUMENTS } from '@/lib/constants';
import { toast } from 'sonner';

interface TeacherFormProps {
  teacher?: Teacher;
  onSuccess: () => void;
  onCancel: () => void;
}

export function TeacherForm({ teacher, onSuccess, onCancel }: TeacherFormProps) {
  const { isAdmin } = useAuth();
  
  // Custom instrument state
  const [showCustomInstrumentInput, setShowCustomInstrumentInput] = useState(false);
  const [customInstrumentValue, setCustomInstrumentValue] = useState('');
  
  const [formData, setFormData] = useState({
    name: teacher?.name || '',
    email: teacher?.email || '',
    instrument: teacher?.instrument || [],
    phone: teacher?.phone || ''
  });
  const [loading, setLoading] = useState(false);

  // Initialize custom instrument state based on existing data
  useState(() => {
    if (teacher?.instrument && Array.isArray(teacher.instrument) && teacher.instrument.length > 0) {
      const firstInstrument = teacher.instrument[0];
      if (!INSTRUMENTS.includes(firstInstrument as any)) {
        setShowCustomInstrumentInput(true);
        setCustomInstrumentValue(firstInstrument);
        setFormData(prev => ({ ...prev, instrument: ['andere'] }));
      }
    }
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      // Validate custom instrument if "andere" is selected
      if (showCustomInstrumentInput && !customInstrumentValue.trim()) {
        toast.error('Bitte geben Sie ein Instrument ein');
        setLoading(false);
        return;
      }

      // Determine the final instrument value
      let finalInstrument = formData.instrument;
      if (showCustomInstrumentInput && customInstrumentValue.trim()) {
        finalInstrument = [customInstrumentValue.trim()];
      }

      // Prepare data for submission - bank_id will be auto-generated by database
      const submitData = {
        name: formData.name.trim(),
        email: formData.email.trim(),
        instrument: finalInstrument,
        phone: formData.phone.trim() || null
      };

      if (teacher) {
        // Update existing teacher - bank_id is never updated
        const { error } = await supabase
          .from('teachers')
          .update(submitData)
          .eq('id', teacher.id);

        if (error) {
          toast.error('Failed to update teacher', { description: error.message });
          return;
        }

        toast.success('Teacher updated successfully');
      } else {
        // Create new teacher - bank_id will be auto-generated by database
        const { error } = await supabase
          .from('teachers')
          .insert([submitData]);

        if (error) {
          toast.error('Failed to create teacher', { description: error.message });
          return;
        }

        toast.success('Teacher created successfully');
      }

      onSuccess();
    } catch (error) {
      console.error('Error saving teacher:', error);
      toast.error('Failed to save teacher');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleInstrumentChange = (value: string) => {
    if (value === 'andere') {
      setShowCustomInstrumentInput(true);
      setFormData(prev => ({ ...prev, instrument: [value] }));
    } else {
      setShowCustomInstrumentInput(false);
      setCustomInstrumentValue('');
      setFormData(prev => ({ ...prev, instrument: [value] }));
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-gray-900">Grunddaten</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="name">Lehrername *</Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) => handleChange('name', e.target.value)}
              required
              placeholder="Lehrername eingeben"
            />
          </div>

          <div>
            <Label htmlFor="email">E-Mail *</Label>
            <Input
              id="email"
              type="email"
              value={formData.email}
              onChange={(e) => handleChange('email', e.target.value)}
              required
              placeholder="teacher@email.com"
            />
          </div>

          <div>
            <Label htmlFor="instrument">Hauptinstrument *</Label>
            <Select 
              value={formData.instrument[0] || ''} 
              onValueChange={handleInstrumentChange}
              required
            >
              <SelectTrigger>
                <SelectValue placeholder="Instrument auswählen..." />
              </SelectTrigger>
              <SelectContent className="max-h-64">
                {INSTRUMENTS.map((instrument) => (
                  <SelectItem key={instrument} value={instrument}>
                    {instrument === 'andere' ? 'Andere' : instrument}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {showCustomInstrumentInput && (
              <div className="mt-2">
                <Input
                  value={customInstrumentValue}
                  onChange={(e) => setCustomInstrumentValue(e.target.value)}
                  placeholder="Instrument eingeben..."
                  required
                />
              </div>
            )}
          </div>

          <div>
            <Label htmlFor="phone">Telefon</Label>
            <Input
              id="phone"
              value={formData.phone}
              onChange={(e) => handleChange('phone', e.target.value)}
              placeholder="+49 123 456 789"
            />
          </div>
        </div>
      </div>

      {/* Admin-only Fields - Only show for admins and when editing existing teachers */}
      {isAdmin && teacher && (
        <div className="space-y-4">
          <h3 className="text-lg font-medium text-gray-900">Verwaltung (nur Admin)</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="bank_id">Bank-ID</Label>
              <Input
                id="bank_id"
                value={teacher.bank_id || ''}
                disabled
                placeholder="Automatisch generiert"
                className="bg-gray-50 font-mono text-sm"
              />
              <p className="text-xs text-gray-500 mt-1">
                Diese ID wird automatisch beim Erstellen des Lehrers generiert und kann nicht geändert werden.
              </p>
            </div>
          </div>
        </div>
      )}

      <div className="flex justify-end space-x-2 pt-6 border-t">
        <Button 
          type="button" 
          variant="outline" 
          onClick={onCancel}
          className="bg-brand-gray hover:bg-brand-gray/80 text-gray-700 border-brand-gray"
        >
          Abbrechen
        </Button>
        <Button 
          type="submit" 
          disabled={loading}
          className="bg-brand-primary hover:bg-brand-primary/90"
        >
          {loading ? 'Speichern...' : teacher ? 'Lehrer aktualisieren' : 'Lehrer erstellen'}
        </Button>
      </div>
    </form>
  );
}